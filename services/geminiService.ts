import { GoogleGenAI, Modality } from "@google/genai";
import imageCompression from "browser-image-compression";
import { ImageFile, LightingEffect, SunlightIntensity, SunlightDirection } from "../types";

function getDirectionalPrompt(direction: SunlightDirection): string {
  switch (direction) {
    case "top":
      return "from the top";
    case "left":
      return "from the left";
    case "right":
      return "from the right";
    case "bottom":
      return "from the bottom";
    case "center":
      return "emanating from the center, like a spotlight";
  }
}

// ✅ Helper to convert File -> Base64
async function toBase64(file: File): Promise<string> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = (error) => reject(error);
  });
}

export async function applyLightingEffect(
  image: ImageFile,
  effect: LightingEffect,
  sunlightIntensity: SunlightIntensity,
  sunlightDirection: SunlightDirection
): Promise<string> {
  try {
    // ✅ Compress the image before sending to API
    const compressedFile = await imageCompression(image.file, {
      maxSizeMB: 2,
      maxWidthOrHeight: 1024,
      useWebWorker: true,
    });

    const base64Image = await toBase64(compressedFile);

    const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });
    const model = "gemini-2.5-flash-image";

    const intensityMap: Record<SunlightIntensity, string> = {
      1: "natural, realistic sunlight",
      2: "bright, vibrant sunlight",
      3: "intense, dramatic sunlight with strong highlights",
    };

    let prompt = "";
    const directionPrompt = getDirectionalPrompt(sunlightDirection);
    const intensityPrompt = intensityMap[sunlightIntensity];

    switch (effect) {
      case "sunlight":
        prompt = `Add photorealistic, ${intensityPrompt} to this image. The light source should be coming ${directionPrompt}. Ensure the highlights and shadows are consistent with this light direction.`;
        break;
      case "shadows":
        prompt =
          "Add deep, natural-looking photorealistic shadows to this image. The shadows should add a sense of depth and realism.";
        break;
      case "sunlight-and-shadows":
        prompt = `Add both photorealistic ${intensityPrompt} and deep shadows. The light source should come ${directionPrompt}.`;
        break;
      case "remove-sunlight":
        prompt =
          "Recreate the image with soft, diffuse lighting — no harsh sunlight or direct highlights.";
        break;
      case "remove-shadows":
        prompt =
          "Reduce deep shadows and make lighting evenly balanced across the image.";
        break;
      case "remove-sunlight-and-shadows":
        prompt =
          "Neutralize all lighting — remove sunlight and shadows completely for a flat-lit image.";
        break;
    }

    const response = await ai.models.generateContent({
      model,
      contents: {
        parts: [
          {
            inlineData: {
              data: base64Image.split(",")[1],
              mimeType: image.mimeType,
            },
          },
          { text: prompt },
        ],
      },
      config: { responseModalities: [Modality.IMAGE] },
    });

    for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        const mimeType = part.inlineData.mimeType;
        return `data:${mimeType};base64,${base64ImageBytes}`;
      }
    }

    throw new Error("No image was generated by the AI.");
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    if (error instanceof Error) {
      return Promise.reject(new Error(`Failed to generate image: ${error.message}`));
    }
    return Promise.reject(new Error("Unknown error occurred while generating the image."));
  }
}
